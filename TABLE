-- Registers --
SP: Stack pointer
A: Accamulator or General purpose
B: General purpose
PC: What instrction.
Sum: Number Compare Flags.
MDR: Last byte read/written from/to memory.
-- General talk --
Turring complete.
8 bit opcodes.
16 bit address bus.
An offical CLI emulator.
An Output register.
-- Opcodes --
0x0: NOP: No comment.
0x1: ADD: Add A and 1 byte operand to A and S(Sum) registers.
0x2: OUTA: Latch A to the 8 output pins, on GUI emulators, write to text screen
on CLI or serial emulators, write to stdout.
0x3: JMP: Jump to 2 byte opcode
0x4: JZ: Same as above, only if zero, otherwise NOP.
0x5: SUB: Subtract A and 1 byte operand to A and S registers.
0x6: JR: Jump to a signed 2 byte opcode relavely to the program.
0x7: CALL: Jump to subroutine and push old PC to stack
0x8: SETSP: Set the StackPointer to the addr specifed, default on boot is 0x100.
0x9: TBA: Copy B to A
0xA: TAB: Copy A to B
0xB: LDA: Load A with one byte opcode
0xC: LDB: Load B with one byte opcode
0xD: LDA (mem): Load A with value in addr specifed
0xE: LDB (mem): Load B with value in addr specfied.
0xF: HLT: Halt the clock, Emulators may quit with value of A.
0x10: STA: Store A in addr specfied.
0x11: STB: Store B in addr specfied.
0x12: PHA: Push A to stack.
0x13: PLA: Pull A from stack.
0x14: RTS: Return from subrutine
0x16: CMP: Same as SUB to only S.
